// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react ts styled components Snapshots makeIndexImports 1`] = `
Object {
  "react-ts/index.tsx": "// DEVELOPER NOTE: These components are ready to lazy-load. You may also import components directly.

export const blah.js = () => import(\\"./blah.js\\");
",
  "react-ts/indexNotLazy.tsx": "// DEVELOPER NOTE: This file includes all components so importing this file may be very inefficient. Use carefully! You may prefer to import components directly or use index.js which has import functions, typically treated as a code splitting point.

export { default as blahJs } from \\"./blah.js\\";
",
}
`;

exports[`react ts styled components Snapshots react-ts-styled-components: <img src="pic.jpeg" class="frogs"> 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "react-ts-styled-components/imgSrc.tsx": "import * as React from \\"react\\";
import * as styled from \\"styled-components\\";

type Props = {
  src: string;
  width?: string;
  height?: string;
  srcset?: string;
  crossorigin?: React.ImgHTMLAttributes<HTMLImageElement>[\\"crossOrigin\\"];
};

const StyledImg = styled.img\`
  background: green;
\`;

const ImgSrc = ({ src, width, height, srcset, crossorigin }: Props) => (
  <StyledImg
    src={src}
    width={width}
    height={height}
    srcSet={srcset}
    crossOrigin={crossorigin}
  />
);

export default ImgSrc;
",
      },
      "formatId": "react-ts-styled-components",
    },
  ],
}
`;

exports[`react ts styled components Snapshots react-ts-styled-components: Basic variables 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "react-ts-styled-components/paragraph.tsx": "import * as React from \\"react\\";

type Props = {
  children?: React.ReactNode;
};

const Paragraph = ({ children }: Props) => (
  <p>
    {children !== undefined ? (
      children
    ) : (
      <React.Fragment>Some placeholder text</React.Fragment>
    )}
  </p>
);

export default Paragraph;
",
      },
      "formatId": "react-ts-styled-components",
    },
  ],
}
`;

exports[`react ts styled components Snapshots react-ts-styled-components: Boolean attribute values 1`] = `
Array [
  Object {
    "files": Object {
      "react-ts-styled-components/row.tsx": "import * as React from \\"react\\";
import * as styled from \\"styled-components\\";

type Props = {
  isReversed?: boolean;
  children?: React.ReactNode;
};

const StyledDiv = styled.div\`
  color: red;
  color: blue;
\`;

const Row = ({ isReversed, children }: Props) => (
  <StyledDiv isReversed={isReversed}>
    {children !== undefined ? (
      children
    ) : (
      <React.Fragment>Columns</React.Fragment>
    )}
  </StyledDiv>
);

export default Row;
",
    },
    "formatId": "react-ts-styled-components",
  },
]
`;

exports[`react ts styled components Snapshots react-ts-styled-components: Boolean attribute values 2`] = `
Array [
  Object {
    "files": Object {
      "react-ts-styled-components/row.tsx": "import * as React from \\"react\\";

type Props = {
  errorId?: string;
  hintId?: string;
  legend?: React.ReactNode;
  hint?: React.ReactNode;
  error?: React.ReactNode;
  children?: React.ReactNode;
};

const Row = ({ errorId, hintId, legend, hint, error, children }: Props) => (
  <div errorId={errorId}>
    <fieldset
      aria-describedby={
        hintId !== undefined || errorId !== undefined
          ? \`\${hintId ? hintId : \\"\\"}\${errorId ? \\" \\" + errorId : \\"\\"}\`
          : undefined
      }
    >
      <legend>
        {legend !== undefined ? (
          legend
        ) : (
          <React.Fragment>Legend text</React.Fragment>
        )}
      </legend>
      {hintId !== undefined ? (
        <React.Fragment>
          <div id={hintId}>
            {hint !== undefined ? (
              hint
            ) : (
              <React.Fragment>Hint text</React.Fragment>
            )}
          </div>
        </React.Fragment>
      ) : (
        \\"\\"
      )}
      {errorId !== undefined ? (
        <React.Fragment>
          <div id={errorId}>
            <span>Error:</span>
            {error !== undefined ? (
              error
            ) : (
              <React.Fragment>Error text</React.Fragment>
            )}
          </div>
        </React.Fragment>
      ) : (
        \\"\\"
      )}
      <div>
        {children !== undefined ? (
          children
        ) : (
          <React.Fragment>Fieldset contents</React.Fragment>
        )}
      </div>
    </fieldset>
  </div>
);

export default Row;
",
    },
    "formatId": "react-ts-styled-components",
  },
]
`;

exports[`react ts styled components Snapshots react-ts-styled-components: Enum attribute values 1`] = `
Array [
  Object {
    "files": Object {
      "react-ts-styled-components/container.tsx": "import * as React from \\"react\\";
import * as styled from \\"styled-components\\";

type Props = {
  containerType: \\"g-flex-container\\" | \\"g-flex-container-fluid\\";
  children?: React.ReactNode;
};

const StyledDiv = styled.div<Pick<Props, \\"containerType\\">>\`
  \${props =>
    [\\"g-flex-container\\", \\"g-flex-container-fluid\\"].indexOf(
      props.containerType
    ) !== -1 &&
    styled.css\`
      background: red;
      color: purple;
    \`}
  \${props =>
    props.containerType === \\"g-flex-container-fluid\\" &&
    styled.css\`
      color: red;
    \`}
@media only screen and (min-width: 48em) {
    \${props =>
      props.containerType === \\"g-flex-container\\" &&
      styled.css\`
        color: blue;
      \`};
  }
\`;

const Container = ({ containerType, children }: Props) => (
  <StyledDiv containerType={containerType}>
    {children !== undefined ? (
      children
    ) : (
      <React.Fragment>Rows...</React.Fragment>
    )}
  </StyledDiv>
);

export default Container;
",
    },
    "formatId": "react-ts-styled-components",
  },
]
`;

exports[`react ts styled components Snapshots react-ts-styled-components: Form input[checked] 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "react-ts-styled-components/input.tsx": "import * as React from \\"react\\";

type Props = {
  textId?: string;
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  name: string;
  value?: string;
  checked?: boolean;
  onChange: any;
};

const Input = ({
  textId,
  disabled,
  readOnly,
  autoFocus,
  name,
  value,
  checked,
  onChange
}: Props) => (
  <input
    id={textId}
    type=\\"checkbox\\"
    disabled={disabled}
    readOnly={readOnly}
    autoFocus={autoFocus}
    name={name}
    value={value}
    checked={checked}
    onChange={onChange}
  />
);

export default Input;
",
      },
      "formatId": "react-ts-styled-components",
    },
  ],
}
`;

exports[`react ts styled components Snapshots react-ts-styled-components: Form label input[checked] 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "react-ts-styled-components/input.tsx": "import * as React from \\"react\\";

type Props = {
  textId?: string;
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  name: string;
  value?: string;
  checked?: boolean;
  onChange: any;
};

const Input = ({
  textId,
  disabled,
  readOnly,
  autoFocus,
  name,
  value,
  checked,
  onChange
}: Props) => (
  <label htmlFor={textId}>
    <input
      id={textId}
      type=\\"checkbox\\"
      disabled={disabled}
      readOnly={readOnly}
      autoFocus={autoFocus}
      name={name}
      value={value}
      checked={checked}
      onChange={onChange}
    />
  </label>
);

export default Input;
",
      },
      "formatId": "react-ts-styled-components",
    },
  ],
}
`;

exports[`react ts styled components Snapshots react-ts-styled-components: H1 with configurable Id 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "react-ts-styled-components/h1Id.tsx": "import * as React from \\"react\\";

type Props = {
  id?: string;
};

const H1Id = ({ id }: Props) => <h1 id={id}>stuff</h1>;

export default H1Id;
",
      },
      "formatId": "react-ts-styled-components",
    },
  ],
}
`;

exports[`react ts styled components Snapshots react-ts-styled-components: Link with boolean class 1`] = `
Array [
  Object {
    "files": Object {
      "react-ts-styled-components/a.tsx": "import * as React from \\"react\\";
import * as styled from \\"styled-components\\";

type Props = {
  isMuted?: boolean;
  href: string;
  rel?: string;
  target?: React.AnchorHTMLAttributes<HTMLAnchorElement>[\\"target\\"];
  children?: React.ReactNode;
};

const StyledA = styled.a<Pick<Props, \\"isMuted\\">>\`
  color: white;
  \${props =>
    props.isMuted &&
    styled.css\`
      opacity: 0.5;
    \`}
\`;

const A = ({ isMuted, href, rel, target, children }: Props) => (
  <StyledA isMuted={isMuted} href={href} rel={rel} target={target}>
    {children !== undefined ? (
      children
    ) : (
      <React.Fragment>Example text</React.Fragment>
    )}
  </StyledA>
);

export default A;
",
    },
    "formatId": "react-ts-styled-components",
  },
]
`;

exports[`react ts styled components Snapshots react-ts-styled-components: Lots of enum attribute values 1`] = `
Array [
  Object {
    "files": Object {
      "react-ts-styled-components/container.tsx": "import * as React from \\"react\\";
import * as styled from \\"styled-components\\";

type Props = {
  isReversed?: boolean;
  columnXs:
    | \\"g-flex-col-xs\\"
    | \\"g-flex-col-xs-1\\"
    | \\"g-flex-col-xs-2\\"
    | \\"g-flex-col-xs-3\\"
    | \\"g-flex-col-xs-4\\"
    | \\"g-flex-col-xs-5\\"
    | \\"g-flex-col-xs-6\\"
    | \\"g-flex-col-xs-7\\"
    | \\"g-flex-col-xs-8\\"
    | \\"g-flex-col-xs-9\\"
    | \\"g-flex-col-xs-10\\"
    | \\"g-flex-col-xs-11\\"
    | \\"g-flex-col-xs-12\\";
  children?: React.ReactNode;
};

const StyledDiv = styled.div<Pick<Props, \\"columnXs\\">>\`
  color: red;
  \${props =>
    props.columnXs === \\"g-flex-col-xs\\" &&
    styled.css\`
      color: blue;
    \`}
\`;

const Container = ({ isReversed, columnXs, children }: Props) => (
  <StyledDiv isReversed={isReversed} columnXs={columnXs}>
    {children !== undefined ? (
      children
    ) : (
      <React.Fragment>Columns</React.Fragment>
    )}
  </StyledDiv>
);

export default Container;
",
    },
    "formatId": "react-ts-styled-components",
  },
]
`;

exports[`react ts styled components Snapshots react-ts-styled-components: form input[text] 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "react-ts-styled-components/input.tsx": "import * as React from \\"react\\";

type Props = {
  textId?: string;
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  name: string;
  value?: string;
  spellCheck?: boolean;
  maxLength?: number;
  autoComplete: React.InputHTMLAttributes<HTMLInputElement>[\\"autoComplete\\"];
  onChange: any;
};

const Input = ({
  textId,
  disabled,
  readOnly,
  autoFocus,
  name,
  value,
  spellCheck,
  maxLength,
  autoComplete,
  onChange
}: Props) => (
  <React.Fragment>
    <label htmlFor={textId}>Label text</label>
    <input
      id={textId}
      type=\\"text\\"
      disabled={disabled}
      readOnly={readOnly}
      autoFocus={autoFocus}
      name={name}
      value={value}
      spellCheck={spellCheck}
      maxLength={maxLength}
      autoComplete={autoComplete}
      onChange={onChange}
    />
  </React.Fragment>
);

export default Input;
",
      },
      "formatId": "react-ts-styled-components",
    },
  ],
}
`;

exports[`react ts styled components react-ts-styled-components: CSS Configuration (CSS Variables and Scss Variables) 1`] = `
Array [
  Object {
    "files": Object {
      "react-ts-styled-components/a.tsx": "import * as React from \\"react\\";
import * as styled from \\"styled-components\\";

type Props = {
  isMuted?: boolean;
  href: string;
  rel?: string;
  target?: React.AnchorHTMLAttributes<HTMLAnchorElement>[\\"target\\"];
  children?: React.ReactNode;
};

const StyledA = styled.a<Pick<Props, \\"isMuted\\">>\`
  color: #ffffff !important;
  \${props =>
    props.isMuted &&
    styled.css\`
      opacity: 0.5;
    \`}
\`;

const A = ({ isMuted, href, rel, target, children }: Props) => (
  <StyledA isMuted={isMuted} href={href} rel={rel} target={target}>
    {children !== undefined ? (
      children
    ) : (
      <React.Fragment>Example text</React.Fragment>
    )}
  </StyledA>
);

export default A;
",
    },
    "formatId": "react-ts-styled-components",
  },
]
`;

exports[`react ts styled components react-ts-styled-components: CSS Configuration (CSS Variables and Scss Variables) 2`] = `
Array [
  Object {
    "files": Object {
      "react-ts-styled-components/a.tsx": "import * as React from \\"react\\";
import * as styled from \\"styled-components\\";

type Props = {
  isMuted?: boolean;
  href: string;
  rel?: string;
  target?: React.AnchorHTMLAttributes<HTMLAnchorElement>[\\"target\\"];
  children?: React.ReactNode;
};

const StyledA = styled.a<Pick<Props, \\"isMuted\\">>\`
  background: #ffffff url(\\"big.gif\\") !important;
  \${props =>
    props.isMuted &&
    styled.css\`
      opacity: 0.5;
    \`}
\`;

const A = ({ isMuted, href, rel, target, children }: Props) => (
  <StyledA isMuted={isMuted} href={href} rel={rel} target={target}>
    {children !== undefined ? (
      children
    ) : (
      <React.Fragment>Example text</React.Fragment>
    )}
  </StyledA>
);

export default A;
",
    },
    "formatId": "react-ts-styled-components",
  },
]
`;

exports[`react ts styled components react-ts-styled-components: CSS Configuration of Fonts 1`] = `
Array [
  Object {
    "files": Object {
      "react-ts-styled-components/a.tsx": "import * as React from \\"react\\";
import * as styled from \\"styled-components\\";

type Props = {
  href: string;
  rel?: string;
  target?: React.AnchorHTMLAttributes<HTMLAnchorElement>[\\"target\\"];
  children?: React.ReactNode;
};

const StyledA = styled.a\`
  font-family: Arial, sans-serif;
\`;

const A = ({ href, rel, target, children }: Props) => (
  <StyledA href={href} rel={rel} target={target}>
    {children !== undefined ? (
      children
    ) : (
      <React.Fragment>Example text</React.Fragment>
    )}
  </StyledA>
);

export default A;
",
    },
    "formatId": "react-ts-styled-components",
  },
]
`;

exports[`react ts styled components react-ts-styled-components: CalculatedProps 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "react-ts-styled-components/textbox.tsx": "import * as React from \\"react\\";

type Props = {
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  name: string;
  value?: string;
  min?: number;
  max?: number;
  type: React.InputHTMLAttributes<HTMLInputElement>[\\"type\\"];
  spellCheck?: boolean;
  maxLength?: number;
  autoComplete: React.InputHTMLAttributes<HTMLInputElement>[\\"autoComplete\\"];
  onChange: any;
};

const Textbox = ({
  disabled,
  readOnly,
  autoFocus,
  name,
  value,
  min,
  max,
  type,
  spellCheck,
  maxLength,
  autoComplete,
  onChange
}: Props) => (
  <input
    disabled={disabled}
    readOnly={readOnly}
    autoFocus={autoFocus}
    name={name}
    value={value}
    min={min}
    max={max}
    type={type}
    spellCheck={spellCheck}
    maxLength={maxLength}
    autoComplete={autoComplete}
    onChange={onChange}
  />
);

const Textbox__calculated = (
  props: Pick<
    Props,
    | \\"disabled\\"
    | \\"readOnly\\"
    | \\"autoFocus\\"
    | \\"name\\"
    | \\"value\\"
    | \\"min\\"
    | \\"max\\"
    | \\"type\\"
    | \\"spellCheck\\"
    | \\"maxLength\\"
    | \\"autoComplete\\"
    | \\"onChange\\"
  >
) =>
  React.createElement(Textbox, {
    ...props,
    textValueLength: (props => {
      return textValue.length;
    })(props)
  });

export { Textbox };

export default Textbox__calculated;
",
      },
      "formatId": "react-ts-styled-components",
    },
  ],
}
`;

exports[`react ts styled components react-ts-styled-components: jsxToUsageCode with boolean false 1`] = `
Object {
  "react-ts-styled-components": "import * as React from \\"react\\";
import * as Ul from \\"@govtnz/ds/build/react-ts-styled-components/Ul\\";
import * as Li from \\"@govtnz/ds/build/react-ts-styled-components/Li\\";

export default () => (
  <Ul isBulleted=\\"false\\">
    <Li>Unordered item one</Li>
    <Li>Unordered item two</Li>
  </Ul>
);
",
}
`;

exports[`react ts styled components react-ts-styled-components: jsxToUsageCode with boolean false and inline HTML 1`] = `
Object {
  "react-ts-styled-components": "import * as React from \\"react\\";
import * as Ul from \\"@govtnz/ds/build/react-ts-styled-components/Ul\\";
import * as Li from \\"@govtnz/ds/build/react-ts-styled-components/Li\\";

export default () => (
  <Ul isBulleted=\\"false\\">
    <Li>
      Unordered<a href=\\"http://zombo.com/\\">item one</a>
    </Li>
    <Li>Unordered item two</Li>
  </Ul>
);
",
}
`;

exports[`react ts styled components react-ts-styled-components: jsxToUsageCode with boolean true 1`] = `
Object {
  "react-ts-styled-components": "import * as React from \\"react\\";
import * as Ul from \\"@govtnz/ds/build/react-ts-styled-components/Ul\\";
import * as Li from \\"@govtnz/ds/build/react-ts-styled-components/Li\\";

export default () => (
  <Ul isBulleted>
    <Li>Unordered item one</Li>
    <Li>Unordered item two</Li>
  </Ul>
);
",
}
`;

exports[`react ts styled components react-ts-styled-components: jsxToUsageCode with enumerations 1`] = `
Object {
  "react-ts-styled-components": "import * as React from \\"react\\";
import * as Div from \\"@govtnz/ds/build/react-ts-styled-components/Div\\";

export default () => <Div containerType=\\"fixed\\" />;
",
}
`;

exports[`react ts styled components react-ts-styled-components: makeUsage 1`] = `
Object {
  "react-ts-styled-components": "import * as React from \\"react\\";
import * as H1 from \\"@govtnz/ds/build/react-ts-styled-components/H1\\";
import * as A from \\"@govtnz/ds/build/react-ts-styled-components/A\\";

export default () => (
  <H1>
    <A href=\\"https://html5zombo.com/\\" reversed=\\"On\\">
      Click me
    </A>
  </H1>
);
",
}
`;

exports[`react ts styled components react-ts-styled-components: makeUsage with booleans 1`] = `
Object {
  "react-ts-styled-components": "import * as React from \\"react\\";
import * as H1 from \\"@govtnz/ds/build/react-ts-styled-components/H1\\";
import * as A from \\"@govtnz/ds/build/react-ts-styled-components/A\\";

export default () => (
  <H1>
    <A href=\\"https://html5zombo.com/\\" isReversed>
      Click me
    </A>
  </H1>
);
",
}
`;

exports[`react ts styled components react-ts-styled-components: retains name prop 1`] = `
Object {
  "disposeAll": [Function],
  "metaTemplates": Array [
    Object {
      "files": Object {
        "react-ts-styled-components/textboxes.tsx": "import * as React from \\"react\\";

type Props = {
  yearId?: string;
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  yearName: string;
  value?: string;
  spellCheck?: boolean;
  autoComplete: React.InputHTMLAttributes<HTMLInputElement>[\\"autoComplete\\"];
  onChange: any;
  monthId?: string;
  monthName: string;
  value2?: string;
  dayId?: string;
  dayName: string;
  value3?: string;
};

const Textboxes = ({
  yearId,
  disabled,
  readOnly,
  autoFocus,
  yearName,
  value,
  spellCheck,
  autoComplete,
  onChange,
  monthId,
  monthName,
  value2,
  dayId,
  dayName,
  value3
}: Props) => (
  <React.Fragment>
    <input
      id={yearId}
      maxLength={4}
      name={yearName}
      type=\\"text\\"
      disabled={disabled}
      readOnly={readOnly}
      autoFocus={autoFocus}
      value={value}
      spellCheck={spellCheck}
      autoComplete={autoComplete}
      onChange={onChange}
    />
    <input
      id={monthId}
      maxLength={2}
      name={monthName}
      type=\\"text\\"
      value={value2}
      disabled={disabled}
      readOnly={readOnly}
      autoFocus={autoFocus}
      spellCheck={spellCheck}
      autoComplete={autoComplete}
      onChange={onChange}
    />
    <input
      id={dayId}
      maxLength={2}
      name={dayName}
      type=\\"text\\"
      value={value3}
      disabled={disabled}
      readOnly={readOnly}
      autoFocus={autoFocus}
      spellCheck={spellCheck}
      autoComplete={autoComplete}
      onChange={onChange}
    />
  </React.Fragment>
);

export default Textboxes;
",
      },
      "formatId": "react-ts-styled-components",
    },
  ],
}
`;

exports[`react ts styled components: basic <input> makeIndexImports 1`] = `
"import * as React from \\"react\\";

type Props = {
  disabled?: boolean;
  readOnly?: boolean;
  autoFocus?: boolean;
  name: string;
  value?: string;
  min?: number;
  max?: number;
  type: React.InputHTMLAttributes<HTMLInputElement>[\\"type\\"];
  spellCheck?: boolean;
  maxLength?: number;
  autoComplete: React.InputHTMLAttributes<HTMLInputElement>[\\"autoComplete\\"];
  onChange: any;
};

const Inputblock1 = ({
  disabled,
  readOnly,
  autoFocus,
  name,
  value,
  min,
  max,
  type,
  spellCheck,
  maxLength,
  autoComplete,
  onChange
}: Props) => (
  <input
    disabled={disabled}
    readOnly={readOnly}
    autoFocus={autoFocus}
    name={name}
    value={value}
    min={min}
    max={max}
    type={type}
    spellCheck={spellCheck}
    maxLength={maxLength}
    autoComplete={autoComplete}
    onChange={onChange}
  />
);

export default Inputblock1;
"
`;
